{"version":3,"file":"event-listener.cjs","sources":["../src/index.ts"],"sourcesContent":["/**\n * Advanced event listener based on subscribe / publish pattern.\n *\n * @see https://www.patterns.dev/posts/classic-design-patterns/#observerpatternjavascript\n * @see https://gist.github.com/shystruk/d16c0ee7ac7d194da9644e5d740c8338#file-subpub-js\n * @see https://hackernoon.com/do-you-still-register-window-event-listeners-in-each-component-react-in-example-31a4b1f6f1c8\n */\n\nimport {\n  NativeEvent,\n  ClipboardEvent,\n  CompositionEvent,\n  DragEvent,\n  FocusEvent,\n  FormEvent,\n  ChangeEvent,\n  KeyboardEvent,\n  MouseEvent,\n  TouchEvent,\n  PointerEvent,\n  UIEvent,\n  WheelEvent,\n  AnimationEvent,\n  TransitionEvent,\n  NativeEventHandler,\n  ClipboardEventHandler,\n  CompositionEventHandler,\n  DragEventHandler,\n  FocusEventHandler,\n  FormEventHandler,\n  ChangeEventHandler,\n  KeyboardEventHandler,\n  MouseEventHandler,\n  TouchEventHandler,\n  PointerEventHandler,\n  UIEventHandler,\n  WheelEventHandler,\n  AnimationEventHandler,\n  TransitionEventHandler,\n  PossibleEventTarget,\n  EventRegistryEntry,\n  EventsRegistry,\n} from './types';\n\nconst registry: EventsRegistry = {};\n\n/**\n * The global event listener. This function must be a Function.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n * eslint-ignore-next\n */\nconst globalListener = (e: NativeEvent) => {\n  const { type, currentTarget } = e;\n\n  [...registry[type]].forEach(([element, listenersMap]) => {\n    /* istanbul ignore else */\n    if (currentTarget === element) {\n      [...listenersMap].forEach(([listener, options]) => {\n        listener.apply(element, [e]);\n\n        if (typeof options === 'object' && options.once) {\n          removeListener(element, type, listener, options);\n        }\n      });\n    }\n  });\n};\n\n/**\n * Register a new listener with its options and attach the `globalListener`\n * to the target if this is the first listener.\n */\nconst addListener = <T = Element, L = EventListener>(\n  element: T,\n  eventType: string,\n  listener: L,\n  options?: AddEventListenerOptions,\n): void => {\n  // get element listeners first\n  if (!registry[eventType]) {\n    registry[eventType] = new Map();\n  }\n  const oneEventMap = registry[eventType];\n\n  if (!oneEventMap.has(element as PossibleEventTarget)) {\n    oneEventMap.set(element as PossibleEventTarget, new Map());\n  }\n  const oneElementMap = oneEventMap.get(element as PossibleEventTarget) as EventRegistryEntry<T, L>;\n\n  // get listeners size\n  const { size } = oneElementMap;\n\n  // register listener with its options\n  oneElementMap.set(listener, options);\n\n  // add listener last\n  if (!size) {\n    (element as PossibleEventTarget).addEventListener(eventType, globalListener as unknown as EventListener, options);\n  }\n};\n\n/**\n * Remove a listener from registry and detach the `globalListener`\n * if no listeners are found in the registry.\n *\n */\nconst removeListener = <T = Element, L = EventListener>(\n  element: T,\n  eventType: string,\n  listener: L,\n  options?: AddEventListenerOptions,\n): void => {\n  // get listener first\n  const oneEventMap = registry[eventType];\n  const oneElementMap = oneEventMap && (oneEventMap.get(element as PossibleEventTarget) as EventRegistryEntry<T>);\n  const savedOptions = oneElementMap && oneElementMap.get(listener as NativeEventHandler<typeof element>);\n\n  // also recover initial options\n  const eventOptions = savedOptions !== undefined ? savedOptions : options;\n\n  // unsubscribe second, remove from registry\n  if (oneElementMap && oneElementMap.has(listener as NativeEventHandler<typeof element>))\n    oneElementMap.delete(listener as NativeEventHandler<typeof element>);\n  if (oneEventMap && (!oneElementMap || !oneElementMap.size)) oneEventMap.delete(element as PossibleEventTarget);\n  if (!oneEventMap || !oneEventMap.size) delete registry[eventType];\n\n  // remove listener last\n  /* istanbul ignore else */\n  if (!oneElementMap || !oneElementMap.size) {\n    (element as PossibleEventTarget).removeEventListener(\n      eventType,\n      globalListener as unknown as EventListener,\n      eventOptions,\n    );\n  }\n};\n\n// alias main methods\nconst on: typeof addListener = addListener;\nconst off: typeof removeListener = removeListener;\n\nexport { addListener, removeListener, on, off, globalListener, registry };\nexport type {\n  NativeEvent,\n  ClipboardEvent,\n  CompositionEvent,\n  DragEvent,\n  FocusEvent,\n  FormEvent,\n  ChangeEvent,\n  KeyboardEvent,\n  MouseEvent,\n  TouchEvent,\n  PointerEvent,\n  UIEvent,\n  WheelEvent,\n  AnimationEvent,\n  TransitionEvent,\n  NativeEventHandler,\n  ClipboardEventHandler,\n  CompositionEventHandler,\n  DragEventHandler,\n  FocusEventHandler,\n  FormEventHandler,\n  ChangeEventHandler,\n  KeyboardEventHandler,\n  MouseEventHandler,\n  TouchEventHandler,\n  PointerEventHandler,\n  UIEventHandler,\n  WheelEventHandler,\n  AnimationEventHandler,\n  TransitionEventHandler,\n  PossibleEventTarget,\n  EventRegistryEntry,\n  EventsRegistry,\n};\n"],"names":["registry","globalListener","e","type","currentTarget","element","listenersMap","listener","options","removeListener","addListener","eventType","oneEventMap","oneElementMap","size","savedOptions","eventOptions","on","off"],"mappings":"gFA4CA,MAAMA,EAA2B,CAAC,EAQ5BC,EAAkBC,GAAmB,CACnC,KAAA,CAAE,KAAAC,EAAM,cAAAC,CAAkB,EAAAF,EAE/B,CAAA,GAAGF,EAASG,CAAI,CAAC,EAAE,QAAQ,CAAC,CAACE,EAASC,CAAY,IAAM,CAEnDF,IAAkBC,GACnB,CAAA,GAAGC,CAAY,EAAE,QAAQ,CAAC,CAACC,EAAUC,CAAO,IAAM,CACjDD,EAAS,MAAMF,EAAS,CAACH,CAAC,CAAC,EAEvB,OAAOM,GAAY,UAAYA,EAAQ,MAC1BC,EAAAJ,EAASF,EAAMI,EAAUC,CAAO,CACjD,CACD,CACH,CACD,CACH,EAMME,EAAc,CAClBL,EACAM,EACAJ,EACAC,IACS,CAEJR,EAASW,CAAS,IACZX,EAAAW,CAAS,EAAI,IAAI,KAEtB,MAAAC,EAAcZ,EAASW,CAAS,EAEjCC,EAAY,IAAIP,CAA8B,GACjDO,EAAY,IAAIP,EAAoC,IAAA,GAAK,EAErD,MAAAQ,EAAgBD,EAAY,IAAIP,CAA8B,EAG9D,CAAE,KAAAS,CAAS,EAAAD,EAGHA,EAAA,IAAIN,EAAUC,CAAO,EAG9BM,GACFT,EAAgC,iBAAiBM,EAAWV,EAA4CO,CAAO,CAEpH,EAOMC,EAAiB,CACrBJ,EACAM,EACAJ,EACAC,IACS,CAEH,MAAAI,EAAcZ,EAASW,CAAS,EAChCE,EAAgBD,GAAgBA,EAAY,IAAIP,CAA8B,EAC9EU,EAAeF,GAAiBA,EAAc,IAAIN,CAA8C,EAGhGS,EAAeD,IAAiB,OAAYA,EAAeP,EAG7DK,GAAiBA,EAAc,IAAIN,CAA8C,GACnFM,EAAc,OAAON,CAA8C,EACjEK,IAAgB,CAACC,GAAiB,CAACA,EAAc,OAAOD,EAAY,OAAOP,CAA8B,GACzG,CAACO,GAAe,CAACA,EAAY,OAAM,OAAOZ,EAASW,CAAS,GAI5D,CAACE,GAAiB,CAACA,EAAc,OAClCR,EAAgC,oBAC/BM,EACAV,EACAe,CAAA,CAGN,EAGMC,EAAyBP,EACzBQ,EAA6BT"}